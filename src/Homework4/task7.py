"""Порядковая дата содержит номер года и порядковый номер дня в
этом году – оба в целочисленном формате. При этом год может быть
любым согласно григорианскому календарю, а номер дня – числом в
интервале от 1 до 366 (чтобы учесть високосные годы). Порядковые
даты удобно использовать при расчете разницы в днях, когда счет
ведется именно в днях, а не месяцах. Например, это может касаться
90-дневного периода возврата товара для покупателей, расчета срока
годности товаров или прогнозируемой даты появления малыша на свет.
Напишите функцию с именем ordinal_date, принимающую на вход три целых
числа: день, месяц и год. Функция должна возвращать порядковый номер
заданного дня в указанном году. В основной программе у пользователя
должны запрашиваться день, месяц и год соответственно и выводиться
на экран порядковый номер дня в заданном году. Программа должна
запускаться только в том случае, если она не импортирована в виде
модуля в другой файл."""


def original_date(date):

    """Данная функция принимает на вход дату в формате дд.мм.гггг

    и определяет порядковый день в данном году
    """

    if __name__ == "__main__":
        date = date.split(".")
        day = int(date[0])
        mounth = int(date[1])
        day_sum = []
        kalendar = {1: 31, 2: 29, 3: 31,
                    4: 30, 5: 31, 6: 30,
                    7: 31, 8: 31, 9: 30,
                    10: 31, 11: 30, 12: 31}
        if day > kalendar[mounth]:
            print("Данные некорректны")
        else:
            for num in range(1, mounth):
                day_sum.append(int(kalendar[num]))
                result = sum(day_sum) + day
            return result


my_date = input("Введите дату в формате Day.mounth.year\n")
print(f"{my_date} это {original_date(my_date)} день в году")
